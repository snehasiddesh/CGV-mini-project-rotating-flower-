#include<stdio.h>
#include<stdlib.h>
#include<GL/glut.h>
#include <math.h>
#define DEGREES_TO_RADIANS 3.14159/180.0

GLfloat sb1,sb2,sb3,sb4;
static GLfloat theta[]={0.0, 0.0, 0.0};
static GLint axis=2;
GLint id,m,count,count1;;
int RunMode = 1;
void keyboard( unsigned char key, int x, int y );
void clock();
void anticlock();
void colorenable();
void colordisable();
void speedd4();
void speedd3();
void speedd2();
void speedd();
void speedi1();
void speedi2();
void speedi3();
void speedi4();
void fast();
void slow();
void stop();
void menu(int id);
void display();
GLint flag=0,flag2=0;
void drawstring(float x,float y,float z,char *string)
{
 char *c;
 glRasterPos3f(x,y,z);
 for(c=string;*c!='\0';c++)
 {
  glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18,*c);
 }
}



void screen()
{


glColor3f(1.0,0.0,0.0);

drawstring(-0.4,0.8,0,"CGV MINI PROJECT");
glColor3f(1.0,0.0,1.0);

drawstring(-0.4,0.6,0," ROTATING FLOWER");
glColor3f( 1.0,0.0,0.0 );

drawstring(0,0.5,0,"By:");
glColor3f( 0.9,0.0,1.0 );

drawstring(-0.9,0.4,0.9,"Swathi B C   4AL18CS091:");

drawstring(-0.9,0.3,0.9,"Sneha H R    4AL18CS085:");
glColor3f( 1.0,0.0,0.0 );


drawstring(-0.7,-0.4,0.5,"ACADEMIC YEAR 2020-21");
glColor3f(rand()%2,rand()%2,0.0);
drawstring(-0.7,-0.5,0.5,"press 'a' for flikering color");
drawstring(-0.7,-0.6,0.5,"press 'm' to start");
glutSwapBuffers();
glFlush();

}



void keyboard(unsigned char key,int x,int y)
{


if(key=='c' | key=='C')
glutIdleFunc(clock);

if(key=='a' | key=='A')
glutIdleFunc(anticlock);

if(key=='s' | key=='S')
glutIdleFunc(NULL);

if(key=='i' | key=='I')
{
count1=count1+1;
if(count1==1)
         glutIdleFunc(speedi1);
if(count1==2)
         glutIdleFunc(speedi2);
if(count1==3)
         glutIdleFunc(speedi3);
if(count1==4)
         glutIdleFunc(speedi4);
         }
if(key=='d' | key=='D')
{
count1=count1-1;
if(count1==3)
         glutIdleFunc(speedd4);
if(count1==2)
         glutIdleFunc(speedd3);
if(count1==1)
         glutIdleFunc(speedd2);
if(count1==0)
         glutIdleFunc(speedd);
         }
                 switch ( key )
        {
        case 'm':flag=1;
break;
case 'q':
case 'Q':
exit(0);
break;

case 'x':
case 'X':
axis=0;
break;
case 'y':
case 'Y':
axis=1;
break;

case 'z':
case 'Z':
axis=2;
break;


}
}

void display()
{

glClearColor(0.0,0.4,0.6,0.9);
glClear(GL_COLOR_BUFFER_BIT);
if(flag==0)
{
screen();
}
if(flag==1)
{
glColor3f(1.0,0.0,0.0);
glClearColor(0.0,0.0,0.0,0.0);
glClear(GL_COLOR_BUFFER_BIT);


glLineWidth(10.0);
glBegin(GL_LINES);
glColor3f(0.0,0.0,0.0);
glVertex2f(0,-0.5);
glVertex2f(0,0.5);
glVertex2f(-0.5,0);
glVertex2f(0.5,0);
glVertex2f(-0.4,0.37);
glVertex2f(0.4,-0.37);
glVertex2f(-0.4,-0.37);
glVertex2f(0.4,0.37);
glEnd();

glColor3f(1.0,0.0,0.0);
glBegin(GL_POLYGON);
glVertex2f(0,0);
glVertex2f(0,-0.5);
glVertex2f(0.63,-0.59);
glVertex2f(0.5,0);
glEnd();

glColor3f(0.5,1.0,0.5);
glBegin(GL_POLYGON);
glVertex2f(0.5,0);
glVertex2f(0,0);
glVertex2f(0,0.5);
glVertex2f(0.63,0.59);
glEnd();

glColor3f(0.5,0.0,1.0);
glBegin(GL_POLYGON);
glVertex2f(0,0);
glVertex2f(0,0.5);
glVertex2f(-0.63,0.59);
glVertex2f(-0.5,0);
glEnd();

glColor3f(1.0,1.0,0.0);
glBegin(GL_POLYGON);
glVertex2f(-0.5,0);
glVertex2f(-0.63,-0.59);
glVertex2f(0,-0.5);
glVertex2f(0,0);
glEnd();

glColor3f(0.0,0.5,1.0);
glBegin(GL_POLYGON);
glVertex2f(0,0);
glVertex2f(-0.4,-0.37);
glVertex2f(0,-0.8);
glVertex2f(0.4,-0.37);
glEnd();

glColor3f(1.0,0.0,1.0);
glBegin(GL_POLYGON);
glVertex2f(0,0);
glVertex2f(0.4,-0.37);
glVertex2f(0.8,-0);
glVertex2f(0.4,0.37);
glEnd();

glColor3f(0.0,1.5,0.0);
glBegin(GL_POLYGON);
glVertex2f(0.4,0.37);
glVertex2f(0,0);
glVertex2f(-0.4,0.37);
glVertex2f(0,0.8);
glEnd();

glColor3f(1.0,0.0,0.5);
glBegin(GL_POLYGON);
glVertex2f(-0.4,0.37);
glVertex2f(-0.8,0);
glVertex2f(-0.4,-0.37);
glVertex2f(0,0);
glEnd();

  glLoadIdentity();
  glRotatef(theta[0],1.0,0.0,0.0);
  glRotatef(theta[1],0.0,1.0,0.0);
  glRotatef(theta[2],0.0,0.0,1.0);
  glutSwapBuffers();
glFlush();


}
}

void myreshape(int w,int h)
{
glViewport(0,0,w,h);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
if(w>h)

glOrtho((GLfloat)w/(GLfloat)h*(-1),(GLfloat)w/(GLfloat)h*(1),-1,1,1,-1);
else
glOrtho(-1,1,(GLfloat)h/(GLfloat)w*(-1),(GLfloat)h/(GLfloat)w*(1),1,-1);
glMatrixMode(GL_MODELVIEW);
glutPostRedisplay();

}

void direction(int id)
{
switch(id)
{
case 2:glutIdleFunc(clock);
break;
case 3:glutIdleFunc(anticlock);
break;
}
}

void anticlock()
{
theta[axis]+=5;
if(theta[axis]>360.0)
theta[axis]-=360.0;
glutPostRedisplay();
}

void clock()
{
        theta[axis]-=5;
if(theta[axis]>360.0)
theta[axis]-=360.0;
glutPostRedisplay();
}

void blend(int id)
{
switch(id)
{
case 6: colorenable();
break;
case 7:colordisable();
break;
}
glutPostRedisplay();
}

void colorenable()
{
  glEnable(GL_BLEND);
  glBlendFunc(GL_ONE,GL_ONE);
  glutPostRedisplay();
}

void colordisable()
{
  glDisable(GL_BLEND);
  glutPostRedisplay();
}

void speedd()
{
theta[axis] += 1.0;
if(theta[axis] > 360.0)
    theta[axis] -= 360.0;
glutPostRedisplay();
}
void speedd2()
{
theta[axis] += 2.0;
if(theta[axis] > 360.0)
    theta[axis] -= 360.0;
glutPostRedisplay();
}
void speedd3()
{
theta[axis] += 3.0;
if(theta[axis] > 360.0)
    theta[axis] -= 360.0;
glutPostRedisplay();
}
void speedd4()
{
theta[axis] += 4.0;
if(theta[axis] > 360.0)
    theta[axis] -= 360.0;
glutPostRedisplay();
}
void speedi1()
{
theta[axis] += 7.0;
if(theta[axis] > 360.0)
    theta[axis] -= 360.0;
glutPostRedisplay();
}
void speedi2()
{
theta[axis] += 8.0;
if(theta[axis] > 360.0)
    theta[axis] -= 360.0;
glutPostRedisplay();
}
void speedi3()
{
theta[axis] += 9.0;
if(theta[axis] > 360.0)
    theta[axis] -= 360.0;
glutPostRedisplay();
}
void speedi4()
{
theta[axis] += 11.0;
if(theta[axis] > 360.0)
    theta[axis] -= 360.0;
glutPostRedisplay();
}
void speed(int id)
{
switch(id)
{
case 4:glutIdleFunc(fast);
      break;
case 5:glutIdleFunc(slow);
      break;
}
}
void fast()
{
theta[axis]-=15;
if(theta[axis]>360.0)
theta[axis]-=360.0;
glutPostRedisplay();
}
void slow()
{
theta[axis]-=2;
if(theta[axis]>360.0)
theta[axis]-=360.0;
glutPostRedisplay();
}
void stop()
{
glutIdleFunc(NULL);
}

void menu(int id)
{
switch(id)
{
case 0: exit(0);
break;
case 1:glutIdleFunc(NULL);
break;
}
glutPostRedisplay();

}


int main(int argc, char **argv)
{
glutInit(&argc,argv);
glutInitWindowPosition(300,100);
glutInitWindowSize(500,500);
glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
glutCreateWindow("my window");
sb2=glutCreateMenu(direction);
glutAddMenuEntry("clock",2);
glutAddMenuEntry("anticlock",3);
sb3=glutCreateMenu(speed);
glutAddMenuEntry("fast",4);
glutAddMenuEntry("slow",5);
sb4=glutCreateMenu(blend);
glutAddMenuEntry("colorenable",6);
glutAddMenuEntry("colordisable",7);
glutCreateMenu(menu);
glutAddMenuEntry("stop", 1);
glutAddSubMenu("direction",sb2);
glutAddSubMenu("speed",sb3);
glutAddSubMenu("blend",sb4);
glutReshapeFunc(myreshape);
glutDisplayFunc(display);
glutKeyboardFunc(keyboard);
glutIdleFunc(clock);
glutIdleFunc(anticlock);
glutIdleFunc(stop);
glutAttachMenu(GLUT_RIGHT_BUTTON);
glutMainLoop();